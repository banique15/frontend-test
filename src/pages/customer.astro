---
// Import statements should only be at the top of the file
import { z } from "zod";
import { AddressResult, CustomerResult, OrderResult } from '../utils/schemas';
import CustomerCard from '../components/shopify/CustomerCard.astro';
const email = 'jvsfh@gmail.com'; // Replace with the desired email address
async function fetchOrdersByEmail(email: string) {
  const response = await fetch(
    `https://${import.meta.env.SHOPIFY_SHOP_URL}/admin/api/2022-01/orders.json?status=any&email=${encodeURIComponent(email)}`,
    {
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Access-Token': import.meta.env.SHOPIFY_ADMIN_API_ACCESS_TOKEN,
      },
    }
  );
  const data = await response.json();
  if (data.errors) {
    console.error('API Error:', data.errors);
    throw new Error('API Error: ' + JSON.stringify(data.errors));
  }
  let ordersData = data.orders && Array.isArray(data.orders) ? data.orders : [];
  // Add a fulfillment status field to each order
  ordersData = ordersData.map((order) => ({
    ...order,
    fulfillment_status: order.fulfillment_status || 'unfulfilled',
  }));
  // Parse and return the orders data using a Zod schema
  return OrderResult.array().parse(ordersData);
}
async function fetchCustomers(email: string) {
  const response = await fetch(
    `https://${import.meta.env.SHOPIFY_SHOP_URL}/admin/api/2022-01/customers.json?email=${encodeURIComponent(email)}`,
    {
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Access-Token': import.meta.env.SHOPIFY_ADMIN_API_ACCESS_TOKEN,
      },
    }
  );
  const data = await response.json();
  if (data.errors) {
    console.error('API Error:', data.errors);
    throw new Error('API Error: ' + JSON.stringify(data.errors));
  }
  let customersData = data.customers && Array.isArray(data.customers) ? data.customers : [];
  return CustomerResult.array().parse(customersData);
}
const customers = await fetchCustomers(email);
const orders = await fetchOrdersByEmail(email);
---
<html>
<head>
  <title>Customers</title>
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
    }
    table, th, td {
      border: 1px solid black;
    }
    th, td {
      padding: 8px;
      text-align: left;
    }
  </style>
</head>
<body>
  <h1>Customer Information</h1>
  <table>
    <thead>
      <tr>
        <th>ID</th>
        <th>Email</th>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Street</th>
        <th>City</th>
        <th>State/Province</th>
        <th>Zip/Postal Code</th>
        <th>Country</th>
        <!-- Add other headers as needed -->
      </tr>
    </thead>
    <tbody>
      {customers.map((customer) => (
        <tr key={customer.id}>
          <td>{customer.id}</td>
          <td>{customer.email || 'N/A'}</td>
          <td>{customer.first_name || 'N/A'}</td>
          <td>{customer.last_name || 'N/A'}</td>
          {/* Assuming taking the first address, ensure at least one exists */}
          <td>{customer.addresses?.[0]?.address1 || 'N/A'}</td>
          <td>{customer.addresses?.[0]?.city || 'N/A'}</td>
          <td>{customer.addresses?.[0]?.province || 'N/A'}</td>
          <td>{customer.addresses?.[0]?.zip || 'N/A'}</td>
          <td>{customer.addresses?.[0]?.country || 'N/A'}</td>
        </tr>
      ))}
    </tbody>
  </table>
  <h2>Order Information for {email}</h2>
<table>
  <thead>
    <tr>
      <th>Order ID</th>
      <th>Created At</th>
      <th>Total Price</th>
      <th>Fulfillment Status</th>
      <!-- Add other headers as needed -->
    </tr>
  </thead>
  <tbody>
    {orders.map((order) => (
      <tr key={order.id}>
        <td>{order.id}</td>
        <td>{order.created_at || 'N/A'}</td>
        <td>{order.total_price || 'N/A'}</td>
        <td>{order.fulfillment_status || 'N/A'}</td>
        <!-- Add other order details as needed -->
      </tr>
    ))}
  </tbody>
</table>
</body>
</html>