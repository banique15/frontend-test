---
import { getProductByHandle } from "./../../utils/shopify";
import { setCache } from "./../../utils/cache";

import BaseLayout from "./../../layout/BaseLayout.astro";
import NotFoundLayout from "./../../layout/NotFoundLayout.astro";
import AddToCartForm from "./../../components/shopify/AddToCartForm.svelte";
import ProductImageGallery from "./../../components/shopify/ProductImageGallery.astro";
import ProductBreadcrumb from "./../../components/shopify/ProductBreadcrumb.astro";
import ProductInformations from "./../../components/shopify/ProductInformations.astro";
import ProductRecommendations from "./../../components/shopify/ProductRecommendations.astro";
import ProductReviews from "./../../components/shopify/ProductReviews.astro";
import ProductAccordions from "./../../components/shopify/ProductAccordions.astro";

const { handle } = Astro.params;
const headers = Astro.request.headers;
const ip = headers.get("x-vercel-forwarded-for") || Astro.clientAddress;
const product = await getProductByHandle({ handle: handle || "", buyerIP: ip });

if (!product) {
  Astro.response.status = 404;
}

const firstVariant = product?.variants.nodes[0];
setCache.short(Astro);

const accesstoken = Astro.cookies.get('sf-access-token')?.value ?? '0';
console.log("shopify access token:"+ accesstoken);
---

{
  !product ? (
    <NotFoundLayout title="Product not found" message="Product not found" />
  ) : (
    <BaseLayout title={product.title}>
     

      <section class="container mx-auto pt-[100px]">
        
        <div class="container pt-10">
          <ProductBreadcrumb title={product.title} />
        </div>
        <div class="pb-16 pt-6 lg:grid lg:grid-cols-12 lg:gap-20">
          <div class="lg:col-span-7">
            <ProductImageGallery images={product.images} />
          </div>

          <div class="mt-8 lg:col-span-5 lg:mt-0">
            <ProductInformations
              title={product.title}
              price={firstVariant?.price}
            />

            <div>
              <AddToCartForm
                client:load
                variantId={firstVariant?.id}
                variantQuantityAvailable={firstVariant?.quantityAvailable}
                variantAvailableForSale={firstVariant?.availableForSale}
              />
            </div>

            <div class="mt-8">
              <ProductAccordions />
            </div>
          </div>
        </div>
      </section>

      <!-- <section class="container  mx-auto ">
        <ProductReviews />
      </section>  -->

      <section class="container  mx-auto ">
        <ProductRecommendations productId={product.id} buyerIP={ip} />
      </section>
    </BaseLayout>
  )
}
